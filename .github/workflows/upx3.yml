name: Release Update UPX 临时

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [windows, linux, darwin]
        goarch: [amd64, 386]
        UPXX: [1]
        exclude:
          # Exclude i386 on darwin and dragonfly.
          - goarch: 386
            goos: darwin
        include:
          - goos: darwin
            goarch: arm64
            UPXX: 1
          # BEGIN Linux ARM 5 6 7
          - goos: linux
            goarch: arm
            goarm: 7
            UPXX: 1
          - goos: linux
            goarch: arm
            goarm: 6
            UPXX: 1
          - goos: linux
            goarch: arm
            goarm: 5
            UPXX: 1
          # END Linux ARM 5 6 7
          # BEGIN Other architectures
          - goos: linux
            goarch: arm64
            UPXX: 1
          # BEGIN MIPS
          - goos: linux
            goarch: mipsle
            UPXX: 1
          - goos: linux
            goarch: mipsle
            gomips: softfloat
            UPXX: 1
          - goos: linux
            goarch: mips
            UPXX: 1
          - goos: linux
            goarch: mips
            gomips: softfloat
            UPXX: 1
          # END MIPS
          # BEGIN PPC
          - goos: linux
            goarch: ppc64
            UPXX: 1
          - goos: linux
            goarch: ppc64le
            UPXX: 1
      fail-fast: false

    runs-on: ubuntu-20.04
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      GOMIPS: ${{ matrix.gomips }}
      UPXX: ${{matrix.upx}}
      CGO_ENABLED: 0

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Show workflow information
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOMIPS\"].friendlyName" -r < .github/build/friendly-filenames.json)
          echo "VERSION=$(cat ".github/build/version" | head -1 | tr -d [:space:])" >> $GITHUB_ENV
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, GOMIPS: $GOMIPS, RELEASE_NAME: $_NAME"
          echo "::set-output name=ASSET_NAME::$_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV
  
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          stable: 'false'
          go-version: 1.16.0-rc1

      - name: Get project dependencies
        run: go mod download

      - name: Build Xray
        run: |
          mkdir -p build_assets
          go build -v -o build_assets/xray -trimpath -ldflags "-s -w -buildid=" ./main
          upx build_assets/xray
          sudo touch -mt 202001010000 *
      - name: Build Windows Xray
        if: matrix.goos == 'windows'
        run: |
          cd ./build_assets || exit 1
          mv xray xray.exe
          sudo touch -mt 202001010000 *

      - name: Prepare to release
        run: |
          cp ${GITHUB_WORKSPACE}/README.md ./build_assets/README.md
          wget -O ./build_assets/geoip.dat https://github.com/v2fly/geoip/releases/latest/download/geoip.dat
          wget -O ./build_assets/geosite.dat https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat

      - name: Prepare package for Linux
        if: matrix.goos == 'linux'
        run: |
          ls 
          cp -rv ${GITHUB_WORKSPACE}/.github/build/systemd ./build_assets/systemd

      - name: Create upx and zip package
        run: |
          pushd build_assets || exit 1
          zip -9vr ../xray-upx-$ASSET_NAME.zip .
          popd || exit 1
          FILE=./xray-upx-$ASSET_NAME.zip
          DGST=$FILE.dgst
          openssl dgst -md5    $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha1   $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha256 $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha512 $FILE | sed 's/([^)]*)//g' >>$DGST

      - name: Change the name
        run: |
          mv build_assets xray-upx-$ASSET_NAME
      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xray-upx-${{ steps.get_filename.outputs.ASSET_NAME }} 
          path: xray-upx-${{ steps.get_filename.outputs.ASSET_NAME }}

      - name: Upload files to GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          name: Xray-core-upx ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            ./xray-upx-${{ steps.get_filename.outputs.ASSET_NAME }}.zip*
