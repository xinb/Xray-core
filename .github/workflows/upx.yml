name: UPX Release

on:
  workflow_dispatch:
  release:
    types: [prereleased,released]
  push:
    branches:
      - main
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/*.yml"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/*.yml"
jobs:
  build:
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [windows, linux, darwin]
        goarch: [amd64, 386]
        UPXX: [1]
        exclude:
          # Exclude i386 on darwin and dragonfly.
          - goarch: 386
            goos: darwin
        include:
          - goos: darwin
            goarch: arm64
          # BEGIN Linux ARM 5 6 7
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          # END Linux ARM 5 6 7
          # BEGIN Other architectures
          - goos: linux
            goarch: arm64
          # BEGIN MIPS
          - goos: linux
            goarch: mipsle
          - goos: linux
            goarch: mips
          # END MIPS
          # BEGIN PPC
          - goos: linux
            goarch: ppc64
            UPXX: 1
          - goos: linux
            goarch: ppc64le
            UPXX: 1
      fail-fast: false

    runs-on: ubuntu-20.04
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      GOMIPS: ${{ matrix.gomips }}
      UPXX: ${{matrix.upx}}
      CGO_ENABLED: 0
      BUILD: ${{github.sha}}
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2
      - name: Show workflow information 
        id: get_filename
        run: |
          export _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOMIPS\"].friendlyName" -r < .github/build/friendly-filenames.json)
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, GOMIPS: $GOMIPS, RELEASE_NAME: $_NAME"
          echo "::set-output name=ASSET_NAME::$_NAME"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV
  
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16

      - name: Get project dependencies
        run: go mod download

      - name: Build Xray <Not Release> # 自动编译
        if: github.event_name != 'release'
        run: |
          BUILD=$(expr substr $BUILD 1 7)
          sed -i '/build/ s/Custom/'$BUILD'/' ./core/core.go
          cat ./core/core.go
          mkdir -p build_assets
          go build -v -o build_assets/xray -trimpath -ldflags "-s -w -buildid=" ./main
          upx build_assets/xray
      - name: Build Xray <Released> #Release编译
        if: github.event_name == 'release'
        run: |
          mkdir -p build_assets
          go build -v -o build_assets/xray -trimpath -ldflags "-s -w -buildid=" ./main
          upx build_assets/xray
      - name: Build Mips softfloat Xray #编译softfloat
        if: matrix.goarch == 'mips' || matrix.goarch == 'mipsle'
        run: |
          GOMIPS=softfloat go build -v -o build_assets/xray_softfloat -trimpath -ldflags "-s -w -buildid=" ./main
          upx build_assets/xray_softfloat
      - name: Build Windows Xray #重命名windows执行文件
        if: matrix.goos == 'windows'
        run: |
          cd ./build_assets || exit 1
          mv xray xray.exe

      - name: Prepare to release
        run: |
          cp ${GITHUB_WORKSPACE}/README.md ./build_assets/README.md
          cp ${GITHUB_WORKSPACE}/LICENSE ./build_assets/LICENSE
          LIST=('geoip geoip geoip' 'domain-list-community dlc geosite')
          for i in "${LIST[@]}"
          do
            INFO=($(echo $i | awk 'BEGIN{FS=" ";OFS=" "} {print $1,$2,$3}'))
            LASTEST_TAG="$(curl -sL "https://api.github.com/repos/v2fly/${INFO[0]}/releases" | jq -r ".[0].tag_name" || echo "latest")"
            FILE_NAME="${INFO[2]}.dat"
            echo -e "Downloading ${FILE_NAME}..."
            curl -L "https://github.com/v2fly/${INFO[0]}/releases/download/${LASTEST_TAG}/${INFO[1]}.dat" -o ./build_assets/${FILE_NAME}
            echo -e "Verifying HASH key..."
            HASH="$(curl -sL "https://github.com/v2fly/${INFO[0]}/releases/download/${LASTEST_TAG}/${INFO[1]}.dat.sha256sum" | awk -F ' ' '{print $1}')"
            [ "$(sha256sum "./build_assets/${FILE_NAME}" | awk -F ' ' '{print $1}')" == "${HASH}" ] || { echo -e "The HASH key of ${FILE_NAME} does not match cloud one."; exit 1; }
          done

      - name: Create upx zip package
        run: |
          pushd build_assets || exit 1
          touch -mt 202101010000 *
          zip -9vr ../Xray-upx-$ASSET_NAME.zip .
          popd || exit 1
          FILE=./Xray-upx-$ASSET_NAME.zip
          DGST=$FILE.dgst
          openssl dgst -md5    $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha1   $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha256 $FILE | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha512 $FILE | sed 's/([^)]*)//g' >>$DGST
          mv build_assets Xray-upx-$ASSET_NAME
          ls

      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Xray-upx-${{ steps.get_filename.outputs.ASSET_NAME }} 
          path: ./Xray-upx-${{ steps.get_filename.outputs.ASSET_NAME }}.zip*

      - name: Upload binaries to release #上传文件至release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./Xray-upx-${{ steps.get_filename.outputs.ASSET_NAME }}.zip*
          asset_name: Xray-core ${{ github.ref }}
          tag: ${{ github.ref }}
          file_glob: true
          overwrite: true
